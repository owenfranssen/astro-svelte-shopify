---
import { getCollectionDetails } from '../routes/api/get-collection-details';
import { collectionUrl } from '../routes/api/utils/makeUrl.js';
import navigation from '../data/navigation.json';

---
<div class="hidden h-full lg:flex">
  <!-- Flyout menus -->
  <div class="px-4 bottom-0 inset-x-0">
    <div class="h-full flex justify-center space-x-8">
      { navigation.items.map( menuitem => {
        if(menuitem.items) {
          return (
            <div class="flex">
              <div class="relative flex">
                <!-- Item active: "text-indigo-600", Item inactive: "text-gray-700 hover:text-gray-800" -->
                <button type="button" class="text-gray-700 hover:text-gray-800 relative flex items-center justify-center transition-colors ease-out duration-200 text-sm font-medium" aria-expanded="false">
                  { menuitem.label }
                  <!-- Open: "bg-indigo-600", Closed: "" -->
                  <span class="absolute z-30 -bottom-px inset-x-0 h-0.5 transition ease-out duration-200" aria-hidden="true"></span>
                </button>
              </div>

              <!--
                'Women' flyout menu, show/hide based on flyout menu state.

                Entering: "transition ease-out duration-200"
                  From: "opacity-0"
                  To: "opacity-100"
                Leaving: "transition ease-in duration-150"
                  From: "opacity-100"
                  To: "opacity-0"
              -->
              <div class="absolute z-20 top-full inset-x-0 bg-white text-sm text-gray-500 hidden">
                <!-- Presentational element used to render the bottom shadow, if we put the shadow on the actual panel it pokes out the top, so we use this shorter element to hide the top of the shadow -->
                <div class="absolute inset-0 top-1/2 bg-white shadow" aria-hidden="true"></div>
                <!-- Fake border when menu is open -->
                <div class="absolute inset-0 top-0 h-px max-w-7xl mx-auto px-8" aria-hidden="true">
                  <!-- Open: "bg-gray-200", Closed: "bg-transparent" -->
                  <div class="bg-transparent w-full h-px transition-colors ease-out duration-200"></div>
                </div>

                <div class="relative">
                  <div class="max-w-7xl mx-auto px-8">
                    <div class="grid grid-cols-4 gap-y-10 gap-x-8 py-16">
                      { menuitem.items.map( async item => {
                        let navitem = [];
                        if(item?.collection) {
                          const collection = await getCollectionDetails(item.collection);
                          console.log({collection});

                          navitem = {
                            "label": collection.title,
                            "url": collectionUrl(collection.handle),
                            "image": collection.image.src
                          };
                        } else {
                          navitem = item;
                        }
                        return (
                          <div class="group relative">
                            <div class="aspect-w-1 aspect-h-1 rounded-md bg-gray-100 overflow-hidden group-hover:opacity-75">
                              { navitem?.image && (
                                <img src={ navitem.image } alt={ navitem?.label ?? 'image' } class="object-center object-cover">
                              )}
                            </div>
                            <a href={ navitem?.url ?? '#' } class="mt-4 block font-medium text-gray-900">
                              <span class="absolute z-10 inset-0" aria-hidden="true"></span>
                              { navitem?.label ?? 'Menu item' }
                            </a>
                            <p aria-hidden="true" class="mt-1">Shop now</p>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>)
        }
        else {
          return (
            <a href={menuitem.url} class="flex items-center text-sm font-medium text-gray-700 hover:text-gray-800">{menuitem.label}</a>
          )
        }
      })}
    </div>
  </div>
</div>

<script>
// Handlers for mega menus
// 'button' on click, open associated menu and close any other open menus
// on mouse out, with delay (hover intent) close associated menu
</script>
